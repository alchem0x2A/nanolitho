import matplotlib.pyplot as plt
import numpy as np
from shapely.geometry import Polygon, box, Point
from shapely.affinity import rotate, translate
from matplotlib import patches

# All dimensions are in um
mm = 1000
um = 1.0
nm = 0.001

def make_circle(x, y, r):
    return Point(x, y).buffer(r)

def cosine_dist(degree, power=1):
    """Cosine distribution cos^p (deg)
    """
    c = np.cos(np.deg2rad(degree))
    cp = np.power(c, power)
    return cp


def translate_by_theta_r(shape, theta, r):
    """Translate a shape by theta and r

    
    shift_x = r * sin(theta)
    shift_y = r * cos(theta)
    """
    shift_x = np.cos(np.deg2rad(theta)) * r
    shift_y = np.sin(np.deg2rad(theta)) * r
    new_shape = translate(shape, xoff=shift_x, yoff=shift_y)
    return new_shape


def shape_to_projection(shape, thickness, theta, psi, H):
    """Generate the projected shape along incident angle (theta, psi)
    given the film thickness and spacing H
    """
    tan_psi = np.tan(np.deg2rad(psi))
    r = tan_psi * thickness
    R = tan_psi * H
    shape1 = translate_by_theta_r(shape, theta, r)
    allowed = shape.intersection(shape1)
    projection = translate_by_theta_r(allowed, 180 + theta, (r + R))
    return projection

def get_union_shape(shape, thickness, psi, H, steps=360):
    """Get an envelop of all theta angles
    """
    envelope = shape_to_projection(shape=shape, thickness=thickness, theta=0, psi=psi, H=H)
    angles = np.linspace(0, 360, steps)
    for theta in angles:
        new_shape = shape_to_projection(shape=shape, thickness=thickness, theta=theta, psi=psi, H=H)
        envelope = envelope.union(new_shape)
    return envelope

def bbox_to_mesh(shape, size=1024):
    """Rasterize a shape to a NumPy array
    shape could be conveniently a bbox
    
    """
    # Get the bounding box of the shape
    minx, miny, maxx, maxy = shape.bounds

    # Generate a grid of points
    x, y = np.mgrid[:size, :size]
    points = np.vstack((x.flatten(), y.flatten())).T

    # Scale the points to the bounding box of the shape
    points[:, 0] = points[:, 0] / size * (maxx - minx) + minx
    points[:, 1] = points[:, 1] / size * (maxy - miny) + miny

    return points

def draw_shape(ax, shape, c='black', alpha=0.25):
    """Draw a shape on a given axis"""
    # Create a Polygon patch for the exterior
    exterior_patch = patches.Polygon(np.column_stack(shape.exterior.xy), fill=True, color=c,
                                     edgecolor="none", alpha=alpha)
    ax.add_patch(exterior_patch)

    # Create Polygon patches for the interiors
    for interior in shape.interiors:
        interior_patch = patches.Polygon(np.column_stack(interior.xy), fill=True,
                                         edgecolor="none",
                                         color='white')
        ax.add_patch(interior_patch)
    return



